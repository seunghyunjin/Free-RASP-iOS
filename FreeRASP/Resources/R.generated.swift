//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map(Locale.init)
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try intern.validate()
  }

  /// This `R.color` struct is generated, and contains static references to 23 colors.
  struct color {
    /// Color `AccentColor`.
    static let accentColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "AccentColor")
    /// Color `AngularGradientHighMedium`.
    static let angularGradientHighMedium = Rswift.ColorResource(bundle: R.hostingBundle, name: "AngularGradientHighMedium")
    /// Color `AngularGradientHigh`.
    static let angularGradientHigh = Rswift.ColorResource(bundle: R.hostingBundle, name: "AngularGradientHigh")
    /// Color `AngularGradientLow`.
    static let angularGradientLow = Rswift.ColorResource(bundle: R.hostingBundle, name: "AngularGradientLow")
    /// Color `AngularGradientMediumLow`.
    static let angularGradientMediumLow = Rswift.ColorResource(bundle: R.hostingBundle, name: "AngularGradientMediumLow")
    /// Color `AngularGradientMedium`.
    static let angularGradientMedium = Rswift.ColorResource(bundle: R.hostingBundle, name: "AngularGradientMedium")
    /// Color `BackgroundDark`.
    static let backgroundDark = Rswift.ColorResource(bundle: R.hostingBundle, name: "BackgroundDark")
    /// Color `BackgroundGradientEnd`.
    static let backgroundGradientEnd = Rswift.ColorResource(bundle: R.hostingBundle, name: "BackgroundGradientEnd")
    /// Color `BackgroundGradientStart`.
    static let backgroundGradientStart = Rswift.ColorResource(bundle: R.hostingBundle, name: "BackgroundGradientStart")
    /// Color `Background`.
    static let background = Rswift.ColorResource(bundle: R.hostingBundle, name: "Background")
    /// Color `BlueBlack`.
    static let blueBlack = Rswift.ColorResource(bundle: R.hostingBundle, name: "BlueBlack")
    /// Color `DarkTeal`.
    static let darkTeal = Rswift.ColorResource(bundle: R.hostingBundle, name: "DarkTeal")
    /// Color `GrayInactive`.
    static let grayInactive = Rswift.ColorResource(bundle: R.hostingBundle, name: "GrayInactive")
    /// Color `MeterBGGradientEnd`.
    static let meterBGGradientEnd = Rswift.ColorResource(bundle: R.hostingBundle, name: "MeterBGGradientEnd")
    /// Color `MeterBGGradientStart`.
    static let meterBGGradientStart = Rswift.ColorResource(bundle: R.hostingBundle, name: "MeterBGGradientStart")
    /// Color `MidTeal`.
    static let midTeal = Rswift.ColorResource(bundle: R.hostingBundle, name: "MidTeal")
    /// Color `Placeholder`.
    static let placeholder = Rswift.ColorResource(bundle: R.hostingBundle, name: "Placeholder")
    /// Color `RiskColorHigh`.
    static let riskColorHigh = Rswift.ColorResource(bundle: R.hostingBundle, name: "RiskColorHigh")
    /// Color `RiskColorLow`.
    static let riskColorLow = Rswift.ColorResource(bundle: R.hostingBundle, name: "RiskColorLow")
    /// Color `RiskColorMedium`.
    static let riskColorMedium = Rswift.ColorResource(bundle: R.hostingBundle, name: "RiskColorMedium")
    /// Color `Separator`.
    static let separator = Rswift.ColorResource(bundle: R.hostingBundle, name: "Separator")
    /// Color `SolidRed`.
    static let solidRed = Rswift.ColorResource(bundle: R.hostingBundle, name: "SolidRed")
    /// Color `TextGray`.
    static let textGray = Rswift.ColorResource(bundle: R.hostingBundle, name: "TextGray")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func accentColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.accentColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "AngularGradientHigh", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func angularGradientHigh(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.angularGradientHigh, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "AngularGradientHighMedium", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func angularGradientHighMedium(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.angularGradientHighMedium, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "AngularGradientLow", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func angularGradientLow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.angularGradientLow, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "AngularGradientMedium", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func angularGradientMedium(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.angularGradientMedium, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "AngularGradientMediumLow", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func angularGradientMediumLow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.angularGradientMediumLow, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "Background", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func background(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.background, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "BackgroundDark", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func backgroundDark(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.backgroundDark, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "BackgroundGradientEnd", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func backgroundGradientEnd(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.backgroundGradientEnd, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "BackgroundGradientStart", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func backgroundGradientStart(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.backgroundGradientStart, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "BlueBlack", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func blueBlack(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.blueBlack, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "DarkTeal", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func darkTeal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.darkTeal, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "GrayInactive", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func grayInactive(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.grayInactive, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "MeterBGGradientEnd", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func meterBGGradientEnd(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.meterBGGradientEnd, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "MeterBGGradientStart", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func meterBGGradientStart(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.meterBGGradientStart, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "MidTeal", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func midTeal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.midTeal, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "Placeholder", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func placeholder(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.placeholder, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "RiskColorHigh", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func riskColorHigh(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.riskColorHigh, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "RiskColorLow", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func riskColorLow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.riskColorLow, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "RiskColorMedium", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func riskColorMedium(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.riskColorMedium, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "Separator", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func separator(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.separator, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "SolidRed", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func solidRed(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.solidRed, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "TextGray", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func textGray(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.textGray, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 7 images.
  struct image {
    /// Image `arrow_down`.
    static let arrow_down = Rswift.ImageResource(bundle: R.hostingBundle, name: "arrow_down")
    /// Image `arrow_tiny_down`.
    static let arrow_tiny_down = Rswift.ImageResource(bundle: R.hostingBundle, name: "arrow_tiny_down")
    /// Image `arrow_tiny_right`.
    static let arrow_tiny_right = Rswift.ImageResource(bundle: R.hostingBundle, name: "arrow_tiny_right")
    /// Image `arrow_tiny_up`.
    static let arrow_tiny_up = Rswift.ImageResource(bundle: R.hostingBundle, name: "arrow_tiny_up")
    /// Image `arrow_up`.
    static let arrow_up = Rswift.ImageResource(bundle: R.hostingBundle, name: "arrow_up")
    /// Image `riskNok`.
    static let riskNok = Rswift.ImageResource(bundle: R.hostingBundle, name: "riskNok")
    /// Image `riskOk`.
    static let riskOk = Rswift.ImageResource(bundle: R.hostingBundle, name: "riskOk")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "arrow_down", bundle: ..., traitCollection: ...)`
    static func arrow_down(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.arrow_down, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "arrow_tiny_down", bundle: ..., traitCollection: ...)`
    static func arrow_tiny_down(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.arrow_tiny_down, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "arrow_tiny_right", bundle: ..., traitCollection: ...)`
    static func arrow_tiny_right(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.arrow_tiny_right, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "arrow_tiny_up", bundle: ..., traitCollection: ...)`
    static func arrow_tiny_up(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.arrow_tiny_up, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "arrow_up", bundle: ..., traitCollection: ...)`
    static func arrow_up(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.arrow_up, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "riskNok", bundle: ..., traitCollection: ...)`
    static func riskNok(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.riskNok, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "riskOk", bundle: ..., traitCollection: ...)`
    static func riskOk(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.riskOk, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.nib` struct is generated, and contains static references to 3 nibs.
  struct nib {
    /// Nib `ProtectionStatusHeaderView`.
    static let protectionStatusHeaderView = _R.nib._ProtectionStatusHeaderView()
    /// Nib `ProtectionStatusTypeCellView`.
    static let protectionStatusTypeCellView = _R.nib._ProtectionStatusTypeCellView()
    /// Nib `ProtectionStatusViewController`.
    static let protectionStatusViewController = _R.nib._ProtectionStatusViewController()

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ProtectionStatusHeaderView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.protectionStatusHeaderView) instead")
    static func protectionStatusHeaderView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.protectionStatusHeaderView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ProtectionStatusTypeCellView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.protectionStatusTypeCellView) instead")
    static func protectionStatusTypeCellView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.protectionStatusTypeCellView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ProtectionStatusViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.protectionStatusViewController) instead")
    static func protectionStatusViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.protectionStatusViewController)
    }
    #endif

    static func protectionStatusHeaderView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ProtectionStatusHeaderView? {
      return R.nib.protectionStatusHeaderView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ProtectionStatusHeaderView
    }

    static func protectionStatusTypeCellView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ProtectionStatusTypeCellView? {
      return R.nib.protectionStatusTypeCellView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ProtectionStatusTypeCellView
    }

    static func protectionStatusViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.protectionStatusViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    fileprivate init() {}
  }

  /// This `R.string` struct is generated, and contains static references to 2 localization tables.
  struct string {
    /// This `R.string.launchScreen` struct is generated, and contains static references to 0 localization keys.
    struct launchScreen {
      fileprivate init() {}
    }

    /// This `R.string.localizable` struct is generated, and contains static references to 72 localization keys.
    struct localizable {
      /// en translation: A device protected by a passcode significantly increases your security.
      ///
      /// Locales: en, cs, sk
      static let protectionStatusTypePasscodeDescription = Rswift.StringResource(key: "protectionStatus.type.passcode.description", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "cs", "sk"], comment: nil)
      /// en translation: A running VPN service on mobile devices is critical for security-sensitive applications, as it can indicate potential privacy and security risks.
      ///
      /// Locales: en, cs, sk
      static let protectionStatusTypeSystemVPNDescription = Rswift.StringResource(key: "protectionStatus.type.systemVPN.description", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "cs", "sk"], comment: nil)
      /// en translation: A screen recording of the app has been detected.
      ///
      /// Locales: en, cs, sk
      static let protectionStatusTypeScreenRecordingNok = Rswift.StringResource(key: "protectionStatus.type.screenRecording.nok", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "cs", "sk"], comment: nil)
      /// en translation: A screen recording of the app has not been detected.
      ///
      /// Locales: en, cs, sk
      static let protectionStatusTypeScreenRecordingOk = Rswift.StringResource(key: "protectionStatus.type.screenRecording.ok", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "cs", "sk"], comment: nil)
      /// en translation: A screenshot of the app has been detected.
      ///
      /// Locales: en, cs, sk
      static let protectionStatusTypeScreenshotNok = Rswift.StringResource(key: "protectionStatus.type.screenshot.nok", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "cs", "sk"], comment: nil)
      /// en translation: A screenshot of the app has not been detected.
      ///
      /// Locales: en, cs, sk
      static let protectionStatusTypeScreenshotOk = Rswift.StringResource(key: "protectionStatus.type.screenshot.ok", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "cs", "sk"], comment: nil)
      /// en translation: A simulator is a dangerous environment for running an application that uses sensitive data.
      ///
      /// Locales: en, cs, sk
      static let protectionStatusTypeSimulatorDescription = Rswift.StringResource(key: "protectionStatus.type.simulator.description", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "cs", "sk"], comment: nil)
      /// en translation: An application not distributed via official store might be tampered and insecure.
      ///
      /// Locales: en, cs, sk
      static let protectionStatusTypeUnofficialStoreDescription = Rswift.StringResource(key: "protectionStatus.type.unofficialStore.description", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "cs", "sk"], comment: nil)
      /// en translation: An isolated system for secure data storage is indispensable against advanced attackers.
      ///
      /// Locales: en, cs, sk
      static let protectionStatusTypeSecureEnclaveDescription = Rswift.StringResource(key: "protectionStatus.type.secureEnclave.description", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "cs", "sk"], comment: nil)
      /// en translation: App device binding
      ///
      /// Locales: en, cs, sk
      static let protectionStatusTypeDeviceBindingTitle = Rswift.StringResource(key: "protectionStatus.type.deviceBinding.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "cs", "sk"], comment: nil)
      /// en translation: Application data lock
      ///
      /// Locales: en, cs, sk
      static let protectionStatusTypePasscodeChangeTitle = Rswift.StringResource(key: "protectionStatus.type.passcodeChange.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "cs", "sk"], comment: nil)
      /// en translation: Application signature
      ///
      /// Locales: en, cs, sk
      static let protectionStatusTypeSignatureTitle = Rswift.StringResource(key: "protectionStatus.type.signature.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "cs", "sk"], comment: nil)
      /// en translation: Awesome! We didn’t find any issues, but if you’d still like to report one, you can do so in the tab **Report Attack**.
      ///
      /// Locales: en, cs, sk
      static let protectionStatusMeterRiskLowResultDescription = Rswift.StringResource(key: "protectionStatus.meter.risk.low.result.description", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "cs", "sk"], comment: nil)
      /// en translation: Biometric lock is OK.
      ///
      /// Locales: en, cs, sk
      static let protectionStatusTypeBiometricsOk = Rswift.StringResource(key: "protectionStatus.type.biometrics.ok", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "cs", "sk"], comment: nil)
      /// en translation: Biometric lock isn't active.
      ///
      /// Locales: en, cs, sk
      static let protectionStatusTypeBiometricsNok = Rswift.StringResource(key: "protectionStatus.type.biometrics.nok", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "cs", "sk"], comment: nil)
      /// en translation: Biometrics
      ///
      /// Locales: en, cs, sk
      static let protectionStatusTypeBiometricsTitle = Rswift.StringResource(key: "protectionStatus.type.biometrics.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "cs", "sk"], comment: nil)
      /// en translation: Debugger found.
      ///
      /// Locales: en, cs, sk
      static let protectionStatusTypeDebuggerNok = Rswift.StringResource(key: "protectionStatus.type.debugger.nok", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "cs", "sk"], comment: nil)
      /// en translation: Debugging
      ///
      /// Locales: en, cs, sk
      static let protectionStatusTypeDebuggerTitle = Rswift.StringResource(key: "protectionStatus.type.debugger.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "cs", "sk"], comment: nil)
      /// en translation: Debugging is a sign of an ongoing attack on the application.
      ///
      /// Locales: en, cs, sk
      static let protectionStatusTypeDebuggerDescription = Rswift.StringResource(key: "protectionStatus.type.debugger.description", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "cs", "sk"], comment: nil)
      /// en translation: Device Security
      ///
      /// Locales: en, cs, sk
      static let protectionStatusCategoryDeviceSecurity = Rswift.StringResource(key: "protectionStatus.category.deviceSecurity", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "cs", "sk"], comment: nil)
      /// en translation: Everything is in order
      ///
      /// Locales: en, cs, sk
      static let protectionStatusMeterRiskLowResultTitle = Rswift.StringResource(key: "protectionStatus.meter.risk.low.result.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "cs", "sk"], comment: nil)
      /// en translation: Fake application signature.
      ///
      /// Locales: en, cs, sk
      static let protectionStatusTypeSignatureNok = Rswift.StringResource(key: "protectionStatus.type.signature.nok", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "cs", "sk"], comment: nil)
      /// en translation: High Risk
      ///
      /// Locales: en, cs, sk
      static let protectionStatusMeterRiskHigh = Rswift.StringResource(key: "protectionStatus.meter.risk.high", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "cs", "sk"], comment: nil)
      /// en translation: In-depth Analysis
      ///
      /// Locales: en, cs, sk
      static let protectionStatusCategoryInDepthAnalysis = Rswift.StringResource(key: "protectionStatus.category.inDepthAnalysis", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "cs", "sk"], comment: nil)
      /// en translation: It’s bad
      ///
      /// Locales: en, cs, sk
      static let protectionStatusMeterRiskHighResultTitle = Rswift.StringResource(key: "protectionStatus.meter.risk.high.result.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "cs", "sk"], comment: nil)
      /// en translation: Jailbreak
      ///
      /// Locales: en, cs, sk
      static let protectionStatusTypeJailbreakTitle = Rswift.StringResource(key: "protectionStatus.type.jailbreak.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "cs", "sk"], comment: nil)
      /// en translation: Jailbreak found, the device is compromised.
      ///
      /// Locales: en, cs, sk
      static let protectionStatusTypeJailbreakNok = Rswift.StringResource(key: "protectionStatus.type.jailbreak.nok", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "cs", "sk"], comment: nil)
      /// en translation: Jailbreak not found, the device isn't compromised.
      ///
      /// Locales: en, cs, sk
      static let protectionStatusTypeJailbreakOk = Rswift.StringResource(key: "protectionStatus.type.jailbreak.ok", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "cs", "sk"], comment: nil)
      /// en translation: Low Risk
      ///
      /// Locales: en, cs, sk
      static let protectionStatusMeterRiskLow = Rswift.StringResource(key: "protectionStatus.meter.risk.low", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "cs", "sk"], comment: nil)
      /// en translation: Medium Risk
      ///
      /// Locales: en, cs, sk
      static let protectionStatusMeterRiskMedium = Rswift.StringResource(key: "protectionStatus.meter.risk.medium", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "cs", "sk"], comment: nil)
      /// en translation: Never perform a Jailbreak and open a back door to attackers. If someone leads you to this, it's a possible attacker. If a Jailbreak is found, you're probably the target of an attack.
      ///
      /// Locales: en, cs, sk
      static let protectionStatusTypeJailbreakDescription = Rswift.StringResource(key: "protectionStatus.type.jailbreak.description", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "cs", "sk"], comment: nil)
      /// en translation: No debugger found.
      ///
      /// Locales: en, cs, sk
      static let protectionStatusTypeDebuggerOk = Rswift.StringResource(key: "protectionStatus.type.debugger.ok", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "cs", "sk"], comment: nil)
      /// en translation: No simulator found.
      ///
      /// Locales: en, cs, sk
      static let protectionStatusTypeSimulatorOk = Rswift.StringResource(key: "protectionStatus.type.simulator.ok", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "cs", "sk"], comment: nil)
      /// en translation: Passcode
      ///
      /// Locales: en, cs, sk
      static let protectionStatusTypePasscodeTitle = Rswift.StringResource(key: "protectionStatus.type.passcode.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "cs", "sk"], comment: nil)
      /// en translation: Passcode has been changed.
      ///
      /// Locales: en, cs, sk
      static let protectionStatusTypePasscodeChangeNok = Rswift.StringResource(key: "protectionStatus.type.passcodeChange.nok", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "cs", "sk"], comment: nil)
      /// en translation: Passcode has not been changed.
      ///
      /// Locales: en, cs, sk
      static let protectionStatusTypePasscodeChangeOk = Rswift.StringResource(key: "protectionStatus.type.passcodeChange.ok", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "cs", "sk"], comment: nil)
      /// en translation: Passcode lock is active.
      ///
      /// Locales: en, cs, sk
      static let protectionStatusTypePasscodeOk = Rswift.StringResource(key: "protectionStatus.type.passcode.ok", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "cs", "sk"], comment: nil)
      /// en translation: Passcode lock isn't active.
      ///
      /// Locales: en, cs, sk
      static let protectionStatusTypePasscodeNok = Rswift.StringResource(key: "protectionStatus.type.passcode.nok", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "cs", "sk"], comment: nil)
      /// en translation: Press **Start** to scan your device for potential threats. Afterwards, you’ll receive your security score, calculated based on the threats found on your device and their severity.
      ///
      /// Locales: en, cs, sk
      static let protectionStatusEmptyState = Rswift.StringResource(key: "protectionStatus.emptyState", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "cs", "sk"], comment: nil)
      /// en translation: Protection Status
      ///
      /// Locales: en, cs, sk
      static let tabBarProtectionStatusTitle = Rswift.StringResource(key: "tabBar.protectionStatus.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "cs", "sk"], comment: nil)
      /// en translation: Runtime app manipulation
      ///
      /// Locales: en, cs, sk
      static let protectionStatusTypeRuntimeManipulationTitle = Rswift.StringResource(key: "protectionStatus.type.runtimeManipulation.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "cs", "sk"], comment: nil)
      /// en translation: Runtime manipulation with hooking frameworks is a sign of an ongoing attack on the application.
      ///
      /// Locales: en, cs, sk
      static let protectionStatusTypeRuntimeManipulationDescription = Rswift.StringResource(key: "protectionStatus.type.runtimeManipulation.description", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "cs", "sk"], comment: nil)
      /// en translation: SCORE
      ///
      /// Locales: en, cs, sk
      static let protectionStatusMeterScore = Rswift.StringResource(key: "protectionStatus.meter.score", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "cs", "sk"], comment: nil)
      /// en translation: START
      ///
      /// Locales: en, cs, sk
      static let protectionStatusMeterStart = Rswift.StringResource(key: "protectionStatus.meter.start", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "cs", "sk"], comment: nil)
      /// en translation: Sadly we found multiple issues that put you at risk. Check out the results below and see what you can do to improve your safety.
      ///
      /// Locales: en, cs, sk
      static let protectionStatusMeterRiskHighResultDescription = Rswift.StringResource(key: "protectionStatus.meter.risk.high.result.description", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "cs", "sk"], comment: nil)
      /// en translation: Screen Recording
      ///
      /// Locales: en, cs, sk
      static let protectionStatusTypeScreenRecordingTitle = Rswift.StringResource(key: "protectionStatus.type.screenRecording.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "cs", "sk"], comment: nil)
      /// en translation: Screen recording can be used by malicious actors to capture sensitive user interactions or application flows.
      ///
      /// Locales: en, cs, sk
      static let protectionStatusTypeScreenRecordingDescription = Rswift.StringResource(key: "protectionStatus.type.screenRecording.description", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "cs", "sk"], comment: nil)
      /// en translation: Screenshot
      ///
      /// Locales: en, cs, sk
      static let protectionStatusTypeScreenshotTitle = Rswift.StringResource(key: "protectionStatus.type.screenshot.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "cs", "sk"], comment: nil)
      /// en translation: Screenshots can be used by malicious actors to capture sensitive information displayed in the app, such as login credentials or payment details.
      ///
      /// Locales: en, cs, sk
      static let protectionStatusTypeScreenshotDescription = Rswift.StringResource(key: "protectionStatus.type.screenshot.description", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "cs", "sk"], comment: nil)
      /// en translation: Secure Enclave
      ///
      /// Locales: en, cs, sk
      static let protectionStatusTypeSecureEnclaveTitle = Rswift.StringResource(key: "protectionStatus.type.secureEnclave.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "cs", "sk"], comment: nil)
      /// en translation: Secure data storage system is OK.
      ///
      /// Locales: en, cs, sk
      static let protectionStatusTypeSecureEnclaveOk = Rswift.StringResource(key: "protectionStatus.type.secureEnclave.ok", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "cs", "sk"], comment: nil)
      /// en translation: Simulator
      ///
      /// Locales: en, cs, sk
      static let protectionStatusTypeSimulatorTitle = Rswift.StringResource(key: "protectionStatus.type.simulator.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "cs", "sk"], comment: nil)
      /// en translation: Simulator found.
      ///
      /// Locales: en, cs, sk
      static let protectionStatusTypeSimulatorNok = Rswift.StringResource(key: "protectionStatus.type.simulator.nok", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "cs", "sk"], comment: nil)
      /// en translation: System VPN
      ///
      /// Locales: en, cs, sk
      static let protectionStatusTypeSystemVPNTitle = Rswift.StringResource(key: "protectionStatus.type.systemVPN.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "cs", "sk"], comment: nil)
      /// en translation: System for secure data storage is unavailable.
      ///
      /// Locales: en, cs, sk
      static let protectionStatusTypeSecureEnclaveNok = Rswift.StringResource(key: "protectionStatus.type.secureEnclave.nok", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "cs", "sk"], comment: nil)
      /// en translation: The app has been installed using an official store.
      ///
      /// Locales: en, cs, sk
      static let protectionStatusTypeUnofficialStoreOk = Rswift.StringResource(key: "protectionStatus.type.unofficialStore.ok", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "cs", "sk"], comment: nil)
      /// en translation: The app has been installed using an unofficial store.
      ///
      /// Locales: en, cs, sk
      static let protectionStatusTypeUnofficialStoreNok = Rswift.StringResource(key: "protectionStatus.type.unofficialStore.nok", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "cs", "sk"], comment: nil)
      /// en translation: The application has been transferred.
      ///
      /// Locales: en, cs, sk
      static let protectionStatusTypeDeviceBindingNok = Rswift.StringResource(key: "protectionStatus.type.deviceBinding.nok", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "cs", "sk"], comment: nil)
      /// en translation: The application has not been transferred.
      ///
      /// Locales: en, cs, sk
      static let protectionStatusTypeDeviceBindingOk = Rswift.StringResource(key: "protectionStatus.type.deviceBinding.ok", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "cs", "sk"], comment: nil)
      /// en translation: The original application is electronically signed by the developers. A fake signature is a character of a fake application.
      ///
      /// Locales: en, cs, sk
      static let protectionStatusTypeSignatureDescription = Rswift.StringResource(key: "protectionStatus.type.signature.description", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "cs", "sk"], comment: nil)
      /// en translation: The passcode is used to verify the integrity of the application data. If there is a change, someone may have manipulated the sensitive data in the application.
      ///
      /// Locales: en, cs, sk
      static let protectionStatusTypePasscodeChangeDescription = Rswift.StringResource(key: "protectionStatus.type.passcodeChange.description", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "cs", "sk"], comment: nil)
      /// en translation: The system VPN is disabled.
      ///
      /// Locales: en, cs, sk
      static let protectionStatusTypeSystemVPNOk = Rswift.StringResource(key: "protectionStatus.type.systemVPN.ok", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "cs", "sk"], comment: nil)
      /// en translation: The system VPN is enabled.
      ///
      /// Locales: en, cs, sk
      static let protectionStatusTypeSystemVPNNok = Rswift.StringResource(key: "protectionStatus.type.systemVPN.nok", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "cs", "sk"], comment: nil)
      /// en translation: This primarily serves to protect against the transfer of an application to a fraudster’s device. It's also possible to recognize that an application has been automatically transferred to another device. If this threat is detected and it was not during the migration to a new phone, a compromise may have occurred.
      ///
      /// Locales: en, cs, sk
      static let protectionStatusTypeDeviceBindingDescription = Rswift.StringResource(key: "protectionStatus.type.deviceBinding.description", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "cs", "sk"], comment: nil)
      /// en translation: Tools for runtime app manipulation found.
      ///
      /// Locales: en, cs, sk
      static let protectionStatusTypeRuntimeManipulationNok = Rswift.StringResource(key: "protectionStatus.type.runtimeManipulation.nok", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "cs", "sk"], comment: nil)
      /// en translation: Tools for runtime app manipulation not found.
      ///
      /// Locales: en, cs, sk
      static let protectionStatusTypeRuntimeManipulationOk = Rswift.StringResource(key: "protectionStatus.type.runtimeManipulation.ok", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "cs", "sk"], comment: nil)
      /// en translation: Touch ID and Face ID make it easy to unlock the device, confirm payments.
      ///
      /// Locales: en, cs, sk
      static let protectionStatusTypeBiometricsDescription = Rswift.StringResource(key: "protectionStatus.type.biometrics.description", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "cs", "sk"], comment: nil)
      /// en translation: Unofficial Store
      ///
      /// Locales: en, cs, sk
      static let protectionStatusTypeUnofficialStoreTitle = Rswift.StringResource(key: "protectionStatus.type.unofficialStore.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "cs", "sk"], comment: nil)
      /// en translation: Verified application signature.
      ///
      /// Locales: en, cs, sk
      static let protectionStatusTypeSignatureOk = Rswift.StringResource(key: "protectionStatus.type.signature.ok", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "cs", "sk"], comment: nil)
      /// en translation: We found some issues
      ///
      /// Locales: en, cs, sk
      static let protectionStatusMeterRiskMediumResultTitle = Rswift.StringResource(key: "protectionStatus.meter.risk.medium.result.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "cs", "sk"], comment: nil)
      /// en translation: While your device isn't critically at risk, it’s still worth it to see how you can protect yourself better. See how below.
      ///
      /// Locales: en, cs, sk
      static let protectionStatusMeterRiskMediumResultDescription = Rswift.StringResource(key: "protectionStatus.meter.risk.medium.result.description", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "cs", "sk"], comment: nil)
      /// en translation: You can see how your score is calculated in the **About the Security Score** section.
      ///
      /// Locales: en, cs, sk
      static let protectionStatusMeterRiskHow = Rswift.StringResource(key: "protectionStatus.meter.risk.how", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "cs", "sk"], comment: nil)

      /// en translation: A device protected by a passcode significantly increases your security.
      ///
      /// Locales: en, cs, sk
      static func protectionStatusTypePasscodeDescription(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("protectionStatus.type.passcode.description", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "protectionStatus.type.passcode.description"
        }

        return NSLocalizedString("protectionStatus.type.passcode.description", bundle: bundle, comment: "")
      }

      /// en translation: A running VPN service on mobile devices is critical for security-sensitive applications, as it can indicate potential privacy and security risks.
      ///
      /// Locales: en, cs, sk
      static func protectionStatusTypeSystemVPNDescription(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("protectionStatus.type.systemVPN.description", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "protectionStatus.type.systemVPN.description"
        }

        return NSLocalizedString("protectionStatus.type.systemVPN.description", bundle: bundle, comment: "")
      }

      /// en translation: A screen recording of the app has been detected.
      ///
      /// Locales: en, cs, sk
      static func protectionStatusTypeScreenRecordingNok(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("protectionStatus.type.screenRecording.nok", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "protectionStatus.type.screenRecording.nok"
        }

        return NSLocalizedString("protectionStatus.type.screenRecording.nok", bundle: bundle, comment: "")
      }

      /// en translation: A screen recording of the app has not been detected.
      ///
      /// Locales: en, cs, sk
      static func protectionStatusTypeScreenRecordingOk(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("protectionStatus.type.screenRecording.ok", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "protectionStatus.type.screenRecording.ok"
        }

        return NSLocalizedString("protectionStatus.type.screenRecording.ok", bundle: bundle, comment: "")
      }

      /// en translation: A screenshot of the app has been detected.
      ///
      /// Locales: en, cs, sk
      static func protectionStatusTypeScreenshotNok(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("protectionStatus.type.screenshot.nok", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "protectionStatus.type.screenshot.nok"
        }

        return NSLocalizedString("protectionStatus.type.screenshot.nok", bundle: bundle, comment: "")
      }

      /// en translation: A screenshot of the app has not been detected.
      ///
      /// Locales: en, cs, sk
      static func protectionStatusTypeScreenshotOk(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("protectionStatus.type.screenshot.ok", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "protectionStatus.type.screenshot.ok"
        }

        return NSLocalizedString("protectionStatus.type.screenshot.ok", bundle: bundle, comment: "")
      }

      /// en translation: A simulator is a dangerous environment for running an application that uses sensitive data.
      ///
      /// Locales: en, cs, sk
      static func protectionStatusTypeSimulatorDescription(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("protectionStatus.type.simulator.description", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "protectionStatus.type.simulator.description"
        }

        return NSLocalizedString("protectionStatus.type.simulator.description", bundle: bundle, comment: "")
      }

      /// en translation: An application not distributed via official store might be tampered and insecure.
      ///
      /// Locales: en, cs, sk
      static func protectionStatusTypeUnofficialStoreDescription(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("protectionStatus.type.unofficialStore.description", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "protectionStatus.type.unofficialStore.description"
        }

        return NSLocalizedString("protectionStatus.type.unofficialStore.description", bundle: bundle, comment: "")
      }

      /// en translation: An isolated system for secure data storage is indispensable against advanced attackers.
      ///
      /// Locales: en, cs, sk
      static func protectionStatusTypeSecureEnclaveDescription(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("protectionStatus.type.secureEnclave.description", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "protectionStatus.type.secureEnclave.description"
        }

        return NSLocalizedString("protectionStatus.type.secureEnclave.description", bundle: bundle, comment: "")
      }

      /// en translation: App device binding
      ///
      /// Locales: en, cs, sk
      static func protectionStatusTypeDeviceBindingTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("protectionStatus.type.deviceBinding.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "protectionStatus.type.deviceBinding.title"
        }

        return NSLocalizedString("protectionStatus.type.deviceBinding.title", bundle: bundle, comment: "")
      }

      /// en translation: Application data lock
      ///
      /// Locales: en, cs, sk
      static func protectionStatusTypePasscodeChangeTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("protectionStatus.type.passcodeChange.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "protectionStatus.type.passcodeChange.title"
        }

        return NSLocalizedString("protectionStatus.type.passcodeChange.title", bundle: bundle, comment: "")
      }

      /// en translation: Application signature
      ///
      /// Locales: en, cs, sk
      static func protectionStatusTypeSignatureTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("protectionStatus.type.signature.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "protectionStatus.type.signature.title"
        }

        return NSLocalizedString("protectionStatus.type.signature.title", bundle: bundle, comment: "")
      }

      /// en translation: Awesome! We didn’t find any issues, but if you’d still like to report one, you can do so in the tab **Report Attack**.
      ///
      /// Locales: en, cs, sk
      static func protectionStatusMeterRiskLowResultDescription(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("protectionStatus.meter.risk.low.result.description", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "protectionStatus.meter.risk.low.result.description"
        }

        return NSLocalizedString("protectionStatus.meter.risk.low.result.description", bundle: bundle, comment: "")
      }

      /// en translation: Biometric lock is OK.
      ///
      /// Locales: en, cs, sk
      static func protectionStatusTypeBiometricsOk(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("protectionStatus.type.biometrics.ok", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "protectionStatus.type.biometrics.ok"
        }

        return NSLocalizedString("protectionStatus.type.biometrics.ok", bundle: bundle, comment: "")
      }

      /// en translation: Biometric lock isn't active.
      ///
      /// Locales: en, cs, sk
      static func protectionStatusTypeBiometricsNok(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("protectionStatus.type.biometrics.nok", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "protectionStatus.type.biometrics.nok"
        }

        return NSLocalizedString("protectionStatus.type.biometrics.nok", bundle: bundle, comment: "")
      }

      /// en translation: Biometrics
      ///
      /// Locales: en, cs, sk
      static func protectionStatusTypeBiometricsTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("protectionStatus.type.biometrics.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "protectionStatus.type.biometrics.title"
        }

        return NSLocalizedString("protectionStatus.type.biometrics.title", bundle: bundle, comment: "")
      }

      /// en translation: Debugger found.
      ///
      /// Locales: en, cs, sk
      static func protectionStatusTypeDebuggerNok(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("protectionStatus.type.debugger.nok", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "protectionStatus.type.debugger.nok"
        }

        return NSLocalizedString("protectionStatus.type.debugger.nok", bundle: bundle, comment: "")
      }

      /// en translation: Debugging
      ///
      /// Locales: en, cs, sk
      static func protectionStatusTypeDebuggerTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("protectionStatus.type.debugger.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "protectionStatus.type.debugger.title"
        }

        return NSLocalizedString("protectionStatus.type.debugger.title", bundle: bundle, comment: "")
      }

      /// en translation: Debugging is a sign of an ongoing attack on the application.
      ///
      /// Locales: en, cs, sk
      static func protectionStatusTypeDebuggerDescription(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("protectionStatus.type.debugger.description", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "protectionStatus.type.debugger.description"
        }

        return NSLocalizedString("protectionStatus.type.debugger.description", bundle: bundle, comment: "")
      }

      /// en translation: Device Security
      ///
      /// Locales: en, cs, sk
      static func protectionStatusCategoryDeviceSecurity(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("protectionStatus.category.deviceSecurity", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "protectionStatus.category.deviceSecurity"
        }

        return NSLocalizedString("protectionStatus.category.deviceSecurity", bundle: bundle, comment: "")
      }

      /// en translation: Everything is in order
      ///
      /// Locales: en, cs, sk
      static func protectionStatusMeterRiskLowResultTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("protectionStatus.meter.risk.low.result.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "protectionStatus.meter.risk.low.result.title"
        }

        return NSLocalizedString("protectionStatus.meter.risk.low.result.title", bundle: bundle, comment: "")
      }

      /// en translation: Fake application signature.
      ///
      /// Locales: en, cs, sk
      static func protectionStatusTypeSignatureNok(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("protectionStatus.type.signature.nok", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "protectionStatus.type.signature.nok"
        }

        return NSLocalizedString("protectionStatus.type.signature.nok", bundle: bundle, comment: "")
      }

      /// en translation: High Risk
      ///
      /// Locales: en, cs, sk
      static func protectionStatusMeterRiskHigh(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("protectionStatus.meter.risk.high", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "protectionStatus.meter.risk.high"
        }

        return NSLocalizedString("protectionStatus.meter.risk.high", bundle: bundle, comment: "")
      }

      /// en translation: In-depth Analysis
      ///
      /// Locales: en, cs, sk
      static func protectionStatusCategoryInDepthAnalysis(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("protectionStatus.category.inDepthAnalysis", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "protectionStatus.category.inDepthAnalysis"
        }

        return NSLocalizedString("protectionStatus.category.inDepthAnalysis", bundle: bundle, comment: "")
      }

      /// en translation: It’s bad
      ///
      /// Locales: en, cs, sk
      static func protectionStatusMeterRiskHighResultTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("protectionStatus.meter.risk.high.result.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "protectionStatus.meter.risk.high.result.title"
        }

        return NSLocalizedString("protectionStatus.meter.risk.high.result.title", bundle: bundle, comment: "")
      }

      /// en translation: Jailbreak
      ///
      /// Locales: en, cs, sk
      static func protectionStatusTypeJailbreakTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("protectionStatus.type.jailbreak.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "protectionStatus.type.jailbreak.title"
        }

        return NSLocalizedString("protectionStatus.type.jailbreak.title", bundle: bundle, comment: "")
      }

      /// en translation: Jailbreak found, the device is compromised.
      ///
      /// Locales: en, cs, sk
      static func protectionStatusTypeJailbreakNok(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("protectionStatus.type.jailbreak.nok", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "protectionStatus.type.jailbreak.nok"
        }

        return NSLocalizedString("protectionStatus.type.jailbreak.nok", bundle: bundle, comment: "")
      }

      /// en translation: Jailbreak not found, the device isn't compromised.
      ///
      /// Locales: en, cs, sk
      static func protectionStatusTypeJailbreakOk(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("protectionStatus.type.jailbreak.ok", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "protectionStatus.type.jailbreak.ok"
        }

        return NSLocalizedString("protectionStatus.type.jailbreak.ok", bundle: bundle, comment: "")
      }

      /// en translation: Low Risk
      ///
      /// Locales: en, cs, sk
      static func protectionStatusMeterRiskLow(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("protectionStatus.meter.risk.low", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "protectionStatus.meter.risk.low"
        }

        return NSLocalizedString("protectionStatus.meter.risk.low", bundle: bundle, comment: "")
      }

      /// en translation: Medium Risk
      ///
      /// Locales: en, cs, sk
      static func protectionStatusMeterRiskMedium(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("protectionStatus.meter.risk.medium", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "protectionStatus.meter.risk.medium"
        }

        return NSLocalizedString("protectionStatus.meter.risk.medium", bundle: bundle, comment: "")
      }

      /// en translation: Never perform a Jailbreak and open a back door to attackers. If someone leads you to this, it's a possible attacker. If a Jailbreak is found, you're probably the target of an attack.
      ///
      /// Locales: en, cs, sk
      static func protectionStatusTypeJailbreakDescription(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("protectionStatus.type.jailbreak.description", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "protectionStatus.type.jailbreak.description"
        }

        return NSLocalizedString("protectionStatus.type.jailbreak.description", bundle: bundle, comment: "")
      }

      /// en translation: No debugger found.
      ///
      /// Locales: en, cs, sk
      static func protectionStatusTypeDebuggerOk(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("protectionStatus.type.debugger.ok", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "protectionStatus.type.debugger.ok"
        }

        return NSLocalizedString("protectionStatus.type.debugger.ok", bundle: bundle, comment: "")
      }

      /// en translation: No simulator found.
      ///
      /// Locales: en, cs, sk
      static func protectionStatusTypeSimulatorOk(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("protectionStatus.type.simulator.ok", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "protectionStatus.type.simulator.ok"
        }

        return NSLocalizedString("protectionStatus.type.simulator.ok", bundle: bundle, comment: "")
      }

      /// en translation: Passcode
      ///
      /// Locales: en, cs, sk
      static func protectionStatusTypePasscodeTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("protectionStatus.type.passcode.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "protectionStatus.type.passcode.title"
        }

        return NSLocalizedString("protectionStatus.type.passcode.title", bundle: bundle, comment: "")
      }

      /// en translation: Passcode has been changed.
      ///
      /// Locales: en, cs, sk
      static func protectionStatusTypePasscodeChangeNok(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("protectionStatus.type.passcodeChange.nok", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "protectionStatus.type.passcodeChange.nok"
        }

        return NSLocalizedString("protectionStatus.type.passcodeChange.nok", bundle: bundle, comment: "")
      }

      /// en translation: Passcode has not been changed.
      ///
      /// Locales: en, cs, sk
      static func protectionStatusTypePasscodeChangeOk(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("protectionStatus.type.passcodeChange.ok", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "protectionStatus.type.passcodeChange.ok"
        }

        return NSLocalizedString("protectionStatus.type.passcodeChange.ok", bundle: bundle, comment: "")
      }

      /// en translation: Passcode lock is active.
      ///
      /// Locales: en, cs, sk
      static func protectionStatusTypePasscodeOk(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("protectionStatus.type.passcode.ok", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "protectionStatus.type.passcode.ok"
        }

        return NSLocalizedString("protectionStatus.type.passcode.ok", bundle: bundle, comment: "")
      }

      /// en translation: Passcode lock isn't active.
      ///
      /// Locales: en, cs, sk
      static func protectionStatusTypePasscodeNok(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("protectionStatus.type.passcode.nok", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "protectionStatus.type.passcode.nok"
        }

        return NSLocalizedString("protectionStatus.type.passcode.nok", bundle: bundle, comment: "")
      }

      /// en translation: Press **Start** to scan your device for potential threats. Afterwards, you’ll receive your security score, calculated based on the threats found on your device and their severity.
      ///
      /// Locales: en, cs, sk
      static func protectionStatusEmptyState(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("protectionStatus.emptyState", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "protectionStatus.emptyState"
        }

        return NSLocalizedString("protectionStatus.emptyState", bundle: bundle, comment: "")
      }

      /// en translation: Protection Status
      ///
      /// Locales: en, cs, sk
      static func tabBarProtectionStatusTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("tabBar.protectionStatus.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "tabBar.protectionStatus.title"
        }

        return NSLocalizedString("tabBar.protectionStatus.title", bundle: bundle, comment: "")
      }

      /// en translation: Runtime app manipulation
      ///
      /// Locales: en, cs, sk
      static func protectionStatusTypeRuntimeManipulationTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("protectionStatus.type.runtimeManipulation.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "protectionStatus.type.runtimeManipulation.title"
        }

        return NSLocalizedString("protectionStatus.type.runtimeManipulation.title", bundle: bundle, comment: "")
      }

      /// en translation: Runtime manipulation with hooking frameworks is a sign of an ongoing attack on the application.
      ///
      /// Locales: en, cs, sk
      static func protectionStatusTypeRuntimeManipulationDescription(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("protectionStatus.type.runtimeManipulation.description", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "protectionStatus.type.runtimeManipulation.description"
        }

        return NSLocalizedString("protectionStatus.type.runtimeManipulation.description", bundle: bundle, comment: "")
      }

      /// en translation: SCORE
      ///
      /// Locales: en, cs, sk
      static func protectionStatusMeterScore(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("protectionStatus.meter.score", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "protectionStatus.meter.score"
        }

        return NSLocalizedString("protectionStatus.meter.score", bundle: bundle, comment: "")
      }

      /// en translation: START
      ///
      /// Locales: en, cs, sk
      static func protectionStatusMeterStart(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("protectionStatus.meter.start", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "protectionStatus.meter.start"
        }

        return NSLocalizedString("protectionStatus.meter.start", bundle: bundle, comment: "")
      }

      /// en translation: Sadly we found multiple issues that put you at risk. Check out the results below and see what you can do to improve your safety.
      ///
      /// Locales: en, cs, sk
      static func protectionStatusMeterRiskHighResultDescription(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("protectionStatus.meter.risk.high.result.description", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "protectionStatus.meter.risk.high.result.description"
        }

        return NSLocalizedString("protectionStatus.meter.risk.high.result.description", bundle: bundle, comment: "")
      }

      /// en translation: Screen Recording
      ///
      /// Locales: en, cs, sk
      static func protectionStatusTypeScreenRecordingTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("protectionStatus.type.screenRecording.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "protectionStatus.type.screenRecording.title"
        }

        return NSLocalizedString("protectionStatus.type.screenRecording.title", bundle: bundle, comment: "")
      }

      /// en translation: Screen recording can be used by malicious actors to capture sensitive user interactions or application flows.
      ///
      /// Locales: en, cs, sk
      static func protectionStatusTypeScreenRecordingDescription(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("protectionStatus.type.screenRecording.description", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "protectionStatus.type.screenRecording.description"
        }

        return NSLocalizedString("protectionStatus.type.screenRecording.description", bundle: bundle, comment: "")
      }

      /// en translation: Screenshot
      ///
      /// Locales: en, cs, sk
      static func protectionStatusTypeScreenshotTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("protectionStatus.type.screenshot.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "protectionStatus.type.screenshot.title"
        }

        return NSLocalizedString("protectionStatus.type.screenshot.title", bundle: bundle, comment: "")
      }

      /// en translation: Screenshots can be used by malicious actors to capture sensitive information displayed in the app, such as login credentials or payment details.
      ///
      /// Locales: en, cs, sk
      static func protectionStatusTypeScreenshotDescription(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("protectionStatus.type.screenshot.description", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "protectionStatus.type.screenshot.description"
        }

        return NSLocalizedString("protectionStatus.type.screenshot.description", bundle: bundle, comment: "")
      }

      /// en translation: Secure Enclave
      ///
      /// Locales: en, cs, sk
      static func protectionStatusTypeSecureEnclaveTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("protectionStatus.type.secureEnclave.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "protectionStatus.type.secureEnclave.title"
        }

        return NSLocalizedString("protectionStatus.type.secureEnclave.title", bundle: bundle, comment: "")
      }

      /// en translation: Secure data storage system is OK.
      ///
      /// Locales: en, cs, sk
      static func protectionStatusTypeSecureEnclaveOk(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("protectionStatus.type.secureEnclave.ok", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "protectionStatus.type.secureEnclave.ok"
        }

        return NSLocalizedString("protectionStatus.type.secureEnclave.ok", bundle: bundle, comment: "")
      }

      /// en translation: Simulator
      ///
      /// Locales: en, cs, sk
      static func protectionStatusTypeSimulatorTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("protectionStatus.type.simulator.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "protectionStatus.type.simulator.title"
        }

        return NSLocalizedString("protectionStatus.type.simulator.title", bundle: bundle, comment: "")
      }

      /// en translation: Simulator found.
      ///
      /// Locales: en, cs, sk
      static func protectionStatusTypeSimulatorNok(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("protectionStatus.type.simulator.nok", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "protectionStatus.type.simulator.nok"
        }

        return NSLocalizedString("protectionStatus.type.simulator.nok", bundle: bundle, comment: "")
      }

      /// en translation: System VPN
      ///
      /// Locales: en, cs, sk
      static func protectionStatusTypeSystemVPNTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("protectionStatus.type.systemVPN.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "protectionStatus.type.systemVPN.title"
        }

        return NSLocalizedString("protectionStatus.type.systemVPN.title", bundle: bundle, comment: "")
      }

      /// en translation: System for secure data storage is unavailable.
      ///
      /// Locales: en, cs, sk
      static func protectionStatusTypeSecureEnclaveNok(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("protectionStatus.type.secureEnclave.nok", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "protectionStatus.type.secureEnclave.nok"
        }

        return NSLocalizedString("protectionStatus.type.secureEnclave.nok", bundle: bundle, comment: "")
      }

      /// en translation: The app has been installed using an official store.
      ///
      /// Locales: en, cs, sk
      static func protectionStatusTypeUnofficialStoreOk(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("protectionStatus.type.unofficialStore.ok", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "protectionStatus.type.unofficialStore.ok"
        }

        return NSLocalizedString("protectionStatus.type.unofficialStore.ok", bundle: bundle, comment: "")
      }

      /// en translation: The app has been installed using an unofficial store.
      ///
      /// Locales: en, cs, sk
      static func protectionStatusTypeUnofficialStoreNok(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("protectionStatus.type.unofficialStore.nok", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "protectionStatus.type.unofficialStore.nok"
        }

        return NSLocalizedString("protectionStatus.type.unofficialStore.nok", bundle: bundle, comment: "")
      }

      /// en translation: The application has been transferred.
      ///
      /// Locales: en, cs, sk
      static func protectionStatusTypeDeviceBindingNok(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("protectionStatus.type.deviceBinding.nok", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "protectionStatus.type.deviceBinding.nok"
        }

        return NSLocalizedString("protectionStatus.type.deviceBinding.nok", bundle: bundle, comment: "")
      }

      /// en translation: The application has not been transferred.
      ///
      /// Locales: en, cs, sk
      static func protectionStatusTypeDeviceBindingOk(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("protectionStatus.type.deviceBinding.ok", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "protectionStatus.type.deviceBinding.ok"
        }

        return NSLocalizedString("protectionStatus.type.deviceBinding.ok", bundle: bundle, comment: "")
      }

      /// en translation: The original application is electronically signed by the developers. A fake signature is a character of a fake application.
      ///
      /// Locales: en, cs, sk
      static func protectionStatusTypeSignatureDescription(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("protectionStatus.type.signature.description", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "protectionStatus.type.signature.description"
        }

        return NSLocalizedString("protectionStatus.type.signature.description", bundle: bundle, comment: "")
      }

      /// en translation: The passcode is used to verify the integrity of the application data. If there is a change, someone may have manipulated the sensitive data in the application.
      ///
      /// Locales: en, cs, sk
      static func protectionStatusTypePasscodeChangeDescription(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("protectionStatus.type.passcodeChange.description", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "protectionStatus.type.passcodeChange.description"
        }

        return NSLocalizedString("protectionStatus.type.passcodeChange.description", bundle: bundle, comment: "")
      }

      /// en translation: The system VPN is disabled.
      ///
      /// Locales: en, cs, sk
      static func protectionStatusTypeSystemVPNOk(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("protectionStatus.type.systemVPN.ok", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "protectionStatus.type.systemVPN.ok"
        }

        return NSLocalizedString("protectionStatus.type.systemVPN.ok", bundle: bundle, comment: "")
      }

      /// en translation: The system VPN is enabled.
      ///
      /// Locales: en, cs, sk
      static func protectionStatusTypeSystemVPNNok(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("protectionStatus.type.systemVPN.nok", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "protectionStatus.type.systemVPN.nok"
        }

        return NSLocalizedString("protectionStatus.type.systemVPN.nok", bundle: bundle, comment: "")
      }

      /// en translation: This primarily serves to protect against the transfer of an application to a fraudster’s device. It's also possible to recognize that an application has been automatically transferred to another device. If this threat is detected and it was not during the migration to a new phone, a compromise may have occurred.
      ///
      /// Locales: en, cs, sk
      static func protectionStatusTypeDeviceBindingDescription(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("protectionStatus.type.deviceBinding.description", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "protectionStatus.type.deviceBinding.description"
        }

        return NSLocalizedString("protectionStatus.type.deviceBinding.description", bundle: bundle, comment: "")
      }

      /// en translation: Tools for runtime app manipulation found.
      ///
      /// Locales: en, cs, sk
      static func protectionStatusTypeRuntimeManipulationNok(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("protectionStatus.type.runtimeManipulation.nok", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "protectionStatus.type.runtimeManipulation.nok"
        }

        return NSLocalizedString("protectionStatus.type.runtimeManipulation.nok", bundle: bundle, comment: "")
      }

      /// en translation: Tools for runtime app manipulation not found.
      ///
      /// Locales: en, cs, sk
      static func protectionStatusTypeRuntimeManipulationOk(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("protectionStatus.type.runtimeManipulation.ok", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "protectionStatus.type.runtimeManipulation.ok"
        }

        return NSLocalizedString("protectionStatus.type.runtimeManipulation.ok", bundle: bundle, comment: "")
      }

      /// en translation: Touch ID and Face ID make it easy to unlock the device, confirm payments.
      ///
      /// Locales: en, cs, sk
      static func protectionStatusTypeBiometricsDescription(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("protectionStatus.type.biometrics.description", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "protectionStatus.type.biometrics.description"
        }

        return NSLocalizedString("protectionStatus.type.biometrics.description", bundle: bundle, comment: "")
      }

      /// en translation: Unofficial Store
      ///
      /// Locales: en, cs, sk
      static func protectionStatusTypeUnofficialStoreTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("protectionStatus.type.unofficialStore.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "protectionStatus.type.unofficialStore.title"
        }

        return NSLocalizedString("protectionStatus.type.unofficialStore.title", bundle: bundle, comment: "")
      }

      /// en translation: Verified application signature.
      ///
      /// Locales: en, cs, sk
      static func protectionStatusTypeSignatureOk(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("protectionStatus.type.signature.ok", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "protectionStatus.type.signature.ok"
        }

        return NSLocalizedString("protectionStatus.type.signature.ok", bundle: bundle, comment: "")
      }

      /// en translation: We found some issues
      ///
      /// Locales: en, cs, sk
      static func protectionStatusMeterRiskMediumResultTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("protectionStatus.meter.risk.medium.result.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "protectionStatus.meter.risk.medium.result.title"
        }

        return NSLocalizedString("protectionStatus.meter.risk.medium.result.title", bundle: bundle, comment: "")
      }

      /// en translation: While your device isn't critically at risk, it’s still worth it to see how you can protect yourself better. See how below.
      ///
      /// Locales: en, cs, sk
      static func protectionStatusMeterRiskMediumResultDescription(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("protectionStatus.meter.risk.medium.result.description", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "protectionStatus.meter.risk.medium.result.description"
        }

        return NSLocalizedString("protectionStatus.meter.risk.medium.result.description", bundle: bundle, comment: "")
      }

      /// en translation: You can see how your score is calculated in the **About the Security Score** section.
      ///
      /// Locales: en, cs, sk
      static func protectionStatusMeterRiskHow(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("protectionStatus.meter.risk.how", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "protectionStatus.meter.risk.how"
        }

        return NSLocalizedString("protectionStatus.meter.risk.how", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try nib.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _ProtectionStatusTypeCellView.validate()
    }

    struct _ProtectionStatusHeaderView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "ProtectionStatusHeaderView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ProtectionStatusHeaderView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ProtectionStatusHeaderView
      }

      fileprivate init() {}
    }

    struct _ProtectionStatusTypeCellView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "ProtectionStatusTypeCellView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ProtectionStatusTypeCellView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ProtectionStatusTypeCellView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "arrow_down", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'arrow_down' is used in nib 'ProtectionStatusTypeCellView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "riskOk", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'riskOk' is used in nib 'ProtectionStatusTypeCellView', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "TextGray", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'TextGray' is used in storyboard 'ProtectionStatusTypeCellView', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _ProtectionStatusViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "ProtectionStatusViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
